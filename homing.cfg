[homing_override]
axes: xyz
gcode:
    INITIALIZE_TOOLCHANGER
    STOP_TOOL_PROBE_CRASH_DETECTION
    
    ## Trigger variables
    {% set x = 0 %}
    {% set y = 0 %}
    {% set z = 0 %}
    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set random_x = (range(-50, 50) | random) / 10 %}
    {% set random_y = (range(-50, 50) | random) / 10 %}

    ##  Engage trigger variables according to the input
    {% if params.Y is defined %}
        {% set y = 1 %}    # for y home
    {% endif %}
    {% if params.X is defined %}
        {% set x = 1 %}    # for x home
    {% endif %}
    {% if params.Z is defined %}
        {% set z = 1 %}    # for z home
    {% endif %}

    ## Homing Actions
    {% if printer.probe.last_query  %}
         RESPOND TYPE=echo MSG='Z Probe triggered, cannot home.'        
    {% else %}
        {% if x == 1 or y == 1 or (x == 0 and y == 0 and z == 0) %}  # If X or Y is called
            RESPOND TYPE=echo MSG='Home Y...'
            G91                                            # Relative mode 
            {% if "z" in printer.toolhead.homed_axes %}    # If both z is already homed
                ;G1 Z+5 F1500                               # move Z up 3mm
            {% else %}                                     # but if x is not homed
                ;SET_KINEMATIC_POSITION Z=0                 # Set curent Z position as 0
                ;G1 Z+5 F1500                               # move Z up 3mm
                ;M84                                        # remove the temporary Z postion
            {% endif %}
            G90                                            # Asolute mode
            G28 Z
            G1 Z+10 F1500
            G28 Y                                          # Home Y
        {% endif %}    
        
        {% if x == 1 or (x == 0 and y == 0 and z == 0) %}            # If X is called
            RESPOND TYPE=echo MSG='Home X...'
            G0 Y{max_y-1} F5000                                        # Make sure the toolhead is at max_y
            
            G28 X                                                    # Home X
        {% endif %}

        {% if z == 1 or (x == 0 and y == 0 and z == 0) %}            # If "G28" or "G28 Z" is called
            RESPOND TYPE=echo MSG='Home Z...' 
            {% set random_x = (range(-50, 50) | random) / 10 %}
            {% set random_y = (range(-50, 50) | random) / 10 %}
          
            G90 ; absolute mode
            G0 X{175.0+random_x} Y{175.0+random_y} F12000
            G28 Z
            # G0 X{(max_x/2)+random_x} Y{(max_y/2)+random_y} F9000     # Move the toolhead to the centre of the bed
            # G28 Z                                                    # Home Z
            G91
            G1 Z+2 F1500                                             # Move Z 20mm up off the bed
            G90       
            _ADJUST_Z_HOME_FOR_TOOL_OFFSET                           # Apply toolhead specific Z-offset
        {% endif %}
        
        _APPLY_ACTIVE_TOOL_GCODE_OFFSETS                              # Apply the X and Y toolhead offsets
        M400                                                          # pause and wait in a loop until all moves in the planner are completed.
    {% endif %}


   
[gcode_macro _ADJUST_Z_HOME_FOR_TOOL_OFFSET]
gcode:
      G90 ; absolute mode
      G0 Z10 F1000
      {% set tool = printer.toolchanger.tool %}
      {% if tool %}
         {% set tool_z_offset = printer[tool].gcode_z_offset %}
         {% set probe_z_offset = printer.tool_probe_endstop.active_tool_probe_z_offset %}
         SET_KINEMATIC_POSITION Z={10.0+tool_z_offset|float+probe_z_offset|float}
      {% endif %}

[gcode_macro _APPLY_ACTIVE_TOOL_GCODE_OFFSETS]
gcode:
    ; Apply gcode offsets
    {% set tool = printer.toolchanger.tool %}
    {% if tool %}
      SET_GCODE_OFFSET X={printer[tool].gcode_x_offset} Y={printer[tool].gcode_y_offset} Z={printer[tool].gcode_z_offset}
    {% endif %}

[gcode_macro TOOL_BED_MESH_CALIBRATE]
gcode:
      {% set tool_z_offset = printer[printer.toolchanger.tool].gcode_z_offset %}
      G90 ; absolute mode
      G0 Z10 F1000
      # Bed mesh knows about the probe offset, but not about the tool offset.
      SET_KINEMATIC_POSITION Z={10.0-tool_z_offset|float}
      BED_MESH_CALIBRATE
      G0 Z10 F1000
      SET_KINEMATIC_POSITION Z={10.0+tool_z_offset|float}
